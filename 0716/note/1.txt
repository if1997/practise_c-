1.命名空间
2.new与delete
在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。
　　栈，在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。
　　堆，就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。
　　自由存储区，就是那些由malloc等分配的内存块，他和堆是十分相似的，不过它是用free来结束自己的生命的。
　　全局/静态存储区，全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。
　　常量存储区，这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。
3.重载
C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。
重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。
当您调用一个重载函数或重载运算符时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为重载决策。

C++ 中的函数重载
在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数。
C++ 中的运算符重载
您可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。
重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。
Box operator+(const Box&);
4.有参构造函数与无参构造函数-----函数重载
5.运算符重载----重新解释运算符

6.初始化形参，拷贝构造函数，构造函数
7.引用
8.继承
在原有代码的基础上进行更具体更详细地定义，代码复用
（1）拿到原有类地内容
（2）改造原有的类
（3）添加属于自己地新内容
9.数据权限
public，protected，private
class 类名：继承方式 继承地类
继承方式---public，protected，private
10.基类地隐藏（类型兼容性原则）
儿子可以当爹，子类是一种特殊地父类，
子类对象可以初始化父类对象
父类对象
11.重定义，虚函数，多态继承，重写
虚函数表指针
12.模板template：泛型编程
参数化多态
函数模板--》模板函数--》编译
类模板

多态————根据不同地对象，产生不同地结果
重载多态：知道对象
运行多态：不知道对象，运行时多态

重载多态：函数多态（编译时多态
强制多态：强制类型多态（编译时多态
参数化多态：模板（编译时多态
包含多态：虚函数重新（运行时多态
关键字 virtual：
虚函数表指针 vptr：

动态数组 vector 栈

###继承的过程中，我们有重写，重载，重定义的过程
- 类构造中有重载，